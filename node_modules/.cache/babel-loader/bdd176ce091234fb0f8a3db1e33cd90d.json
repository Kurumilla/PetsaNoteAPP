{"ast":null,"code":"// This file is automatically compiled by Webpack, along with any other files\n// present in this directory. You're encouraged to place your actual application logic in\n// a relevant structure within app/javascript and only use these pack files to reference\n// that code so it'll be compiled.\nimport 'materialize-css/dist/js/materialize';\nimport \"./stylesheets/application.scss\";\nimport Rails from \"@rails/ujs\";\nimport Turbolinks from \"turbolinks\";\nimport * as ActiveStorage from \"@rails/activestorage\";\nimport \"channels\";\nimport './tooltips';\nimport './order';\nRails.start();\nTurbolinks.start();\nActiveStorage.start();\nconsole.log('Webpacker is working!');\ndocument.addEventListener('turbolinks:load', function () {\n  M.updateTextFields();\n  console.log('Webpacker is working!');\n  var elems = document.querySelectorAll('.materialize-textarea');\n\n  if (elems.length) {\n    elems.forEach(function (elem) {\n      return M.textareaAutoResize(elem);\n    });\n  }\n\n  var sidenavElems = document.querySelectorAll('.sidenav');\n  var sidenavInstances = M.Sidenav.init(sidenavElems);\n  document.querySelectorAll('.sidenav a').forEach(function (item) {\n    item.addEventListener('click', function () {\n      var instance = M.Sidenav.getInstance(document.querySelector('.sidenav'));\n      instance.close();\n    });\n  });\n  var themeToggle = document.getElementById(\"theme-toggle\");\n  var isDarkMode = localStorage.getItem(\"darkMode\") === \"true\";\n\n  if (isDarkMode) {\n    document.body.classList.add(\"dark-mode\");\n    if (themeToggle) themeToggle.textContent = window.translations.light_mode;\n  }\n\n  if (themeToggle) {\n    themeToggle.addEventListener(\"click\", function () {\n      var isDarkMode = document.body.classList.toggle(\"dark-mode\");\n      themeToggle.textContent = isDarkMode ? window.translations.light_mode : window.translations.dark_mode;\n      localStorage.setItem(\"darkMode\", isDarkMode);\n    });\n  }\n\n  var savedLocale = localStorage.getItem('language');\n\n  if (savedLocale) {\n    document.documentElement.lang = savedLocale;\n  }\n});","map":{"version":3,"sources":["/home/kurumilla/git/PetsaNoteAPP/app/javascript/packs/application.js"],"names":["Rails","Turbolinks","ActiveStorage","start","console","log","document","addEventListener","M","updateTextFields","elems","querySelectorAll","length","forEach","elem","textareaAutoResize","sidenavElems","sidenavInstances","Sidenav","init","item","instance","getInstance","querySelector","close","themeToggle","getElementById","isDarkMode","localStorage","getItem","body","classList","add","textContent","window","translations","light_mode","toggle","dark_mode","setItem","savedLocale","documentElement","lang"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,OAAO,qCAAP;AACA,OAAO,gCAAP;AAEA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAO,KAAKC,aAAZ,MAA+B,sBAA/B;AACA,OAAO,UAAP;AAEA,OAAO,YAAP;AACA,OAAO,SAAP;AAEAF,KAAK,CAACG,KAAN;AACAF,UAAU,CAACE,KAAX;AACAD,aAAa,CAACC,KAAd;AAEAC,OAAO,CAACC,GAAR,CAAY,uBAAZ;AAEAC,QAAQ,CAACC,gBAAT,CAA0B,iBAA1B,EAA6C,YAAY;AACvDC,EAAAA,CAAC,CAACC,gBAAF;AAEAL,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACA,MAAIK,KAAK,GAAGJ,QAAQ,CAACK,gBAAT,CAA0B,uBAA1B,CAAZ;;AACA,MAAID,KAAK,CAACE,MAAV,EAAkB;AAChBF,IAAAA,KAAK,CAACG,OAAN,CAAc,UAAAC,IAAI;AAAA,aAAIN,CAAC,CAACO,kBAAF,CAAqBD,IAArB,CAAJ;AAAA,KAAlB;AACD;;AAED,MAAME,YAAY,GAAGV,QAAQ,CAACK,gBAAT,CAA0B,UAA1B,CAArB;AACA,MAAMM,gBAAgB,GAAGT,CAAC,CAACU,OAAF,CAAUC,IAAV,CAAeH,YAAf,CAAzB;AAEAV,EAAAA,QAAQ,CAACK,gBAAT,CAA0B,YAA1B,EAAwCE,OAAxC,CAAgD,UAAAO,IAAI,EAAI;AACtDA,IAAAA,IAAI,CAACb,gBAAL,CAAsB,OAAtB,EAA+B,YAAY;AACzC,UAAMc,QAAQ,GAAGb,CAAC,CAACU,OAAF,CAAUI,WAAV,CAAsBhB,QAAQ,CAACiB,aAAT,CAAuB,UAAvB,CAAtB,CAAjB;AACAF,MAAAA,QAAQ,CAACG,KAAT;AACD,KAHD;AAID,GALD;AAOA,MAAMC,WAAW,GAAGnB,QAAQ,CAACoB,cAAT,CAAwB,cAAxB,CAApB;AAEA,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,MAAqC,MAAxD;;AACA,MAAIF,UAAJ,EAAgB;AACdrB,IAAAA,QAAQ,CAACwB,IAAT,CAAcC,SAAd,CAAwBC,GAAxB,CAA4B,WAA5B;AACA,QAAIP,WAAJ,EAAiBA,WAAW,CAACQ,WAAZ,GAA0BC,MAAM,CAACC,YAAP,CAAoBC,UAA9C;AAClB;;AAED,MAAIX,WAAJ,EAAiB;AACfA,IAAAA,WAAW,CAAClB,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AAC1C,UAAMoB,UAAU,GAAGrB,QAAQ,CAACwB,IAAT,CAAcC,SAAd,CAAwBM,MAAxB,CAA+B,WAA/B,CAAnB;AACAZ,MAAAA,WAAW,CAACQ,WAAZ,GAA0BN,UAAU,GAAGO,MAAM,CAACC,YAAP,CAAoBC,UAAvB,GAAoCF,MAAM,CAACC,YAAP,CAAoBG,SAA5F;AACAV,MAAAA,YAAY,CAACW,OAAb,CAAqB,UAArB,EAAiCZ,UAAjC;AACD,KAJD;AAKD;;AAED,MAAMa,WAAW,GAAGZ,YAAY,CAACC,OAAb,CAAqB,UAArB,CAApB;;AACA,MAAIW,WAAJ,EAAiB;AACflC,IAAAA,QAAQ,CAACmC,eAAT,CAAyBC,IAAzB,GAAgCF,WAAhC;AACD;AACF,CAvCD","sourcesContent":["// This file is automatically compiled by Webpack, along with any other files\n// present in this directory. You're encouraged to place your actual application logic in\n// a relevant structure within app/javascript and only use these pack files to reference\n// that code so it'll be compiled.\n\nimport 'materialize-css/dist/js/materialize'\nimport \"./stylesheets/application.scss\";\n\nimport Rails from \"@rails/ujs\"\nimport Turbolinks from \"turbolinks\"\nimport * as ActiveStorage from \"@rails/activestorage\"\nimport \"channels\"\n\nimport './tooltips';\nimport './order';\n\nRails.start()\nTurbolinks.start()\nActiveStorage.start()\n\nconsole.log('Webpacker is working!');\n\ndocument.addEventListener('turbolinks:load', function () {\n  M.updateTextFields();\n\n  console.log('Webpacker is working!');\n  let elems = document.querySelectorAll('.materialize-textarea')\n  if (elems.length) {\n    elems.forEach(elem => M.textareaAutoResize(elem))\n  }\n\n  const sidenavElems = document.querySelectorAll('.sidenav');\n  const sidenavInstances = M.Sidenav.init(sidenavElems);\n\n  document.querySelectorAll('.sidenav a').forEach(item => {\n    item.addEventListener('click', function () {\n      const instance = M.Sidenav.getInstance(document.querySelector('.sidenav'));\n      instance.close();\n    });\n  });\n\n  const themeToggle = document.getElementById(\"theme-toggle\");\n\n  const isDarkMode = localStorage.getItem(\"darkMode\") === \"true\";\n  if (isDarkMode) {\n    document.body.classList.add(\"dark-mode\");\n    if (themeToggle) themeToggle.textContent = window.translations.light_mode;\n  }\n\n  if (themeToggle) {\n    themeToggle.addEventListener(\"click\", () => {\n      const isDarkMode = document.body.classList.toggle(\"dark-mode\");\n      themeToggle.textContent = isDarkMode ? window.translations.light_mode : window.translations.dark_mode;\n      localStorage.setItem(\"darkMode\", isDarkMode);\n    });\n  }\n\n  const savedLocale = localStorage.getItem('language');\n  if (savedLocale) {\n    document.documentElement.lang = savedLocale;\n  }\n})\n\n\n"]},"metadata":{},"sourceType":"module"}