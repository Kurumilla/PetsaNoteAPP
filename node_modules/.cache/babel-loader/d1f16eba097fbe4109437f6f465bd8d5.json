{"ast":null,"code":"document.addEventListener('turbolinks:load', function () {\n  console.log(\"Hola\");\n  var orderSelect = document.querySelector('select[name=\"order\"]'); // Intentamos obtener el valor del orden desde localStorage\n\n  var savedOrder = localStorage.getItem('note_order');\n  var orderToApply = savedOrder || null; // Si no hay valor guardado, lo tomamos de la URL\n  // Revisa si hay un parámetro 'order' en la URL y lo aplica al select\n\n  var urlParams = new URLSearchParams(window.location.search);\n  var orderFromUrl = urlParams.get('order');\n\n  if (orderFromUrl) {\n    orderToApply = orderFromUrl;\n  } // Si encontramos un valor de orden, lo aplicamos tanto al select como a la URL\n\n\n  if (orderToApply) {\n    // Aplicamos el valor al select\n    orderSelect.value = orderToApply; // Si el valor del orden en la URL es diferente de lo que está en la URL actual, actualizamos la URL\n\n    if (window.location.search.indexOf('order') === -1 || orderFromUrl !== savedOrder) {\n      var currentUrl = new URL(window.location.href);\n      currentUrl.searchParams.set('order', orderToApply); // Establecemos el parámetro 'order'\n\n      window.history.pushState({}, '', currentUrl); // Actualizamos la URL sin recargar la página\n    }\n  } // Cuando el usuario cambia el orden\n\n\n  orderSelect.addEventListener('change', function () {\n    var selectedValue = this.value; // Guardamos el valor en localStorage\n\n    localStorage.setItem('note_order', selectedValue); // Actualizamos la URL para reflejar el cambio sin recargar la página\n\n    var currentUrl = new URL(window.location.href);\n    currentUrl.searchParams.set('order', selectedValue); // Establece el parámetro 'order'\n\n    window.history.pushState({}, '', currentUrl); // Actualiza la URL sin recargar la página\n    // Llamada AJAX o actualización de la vista sin recargar\n\n    updateNotesOrder(selectedValue); // Función que actualiza el orden de las notas sin recargar la página\n  }); // Función para actualizar las notas en la página sin recargarla\n\n  function updateNotesOrder(order) {\n    // Realizamos una solicitud AJAX para obtener las notas ordenadas\n    fetch(\"/notes?order=\".concat(order)).then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      // Aquí, actualizas el contenido de las notas de acuerdo con la respuesta\n      // Puedes re-renderizar las notas con la nueva información\n      var notesContainer = document.getElementById('notes-container');\n      notesContainer.innerHTML = ''; // Limpiar las notas actuales\n      // Suponiendo que las notas vienen como una lista de objetos\n\n      data.notes.forEach(function (note) {\n        var noteElement = document.createElement('div');\n        noteElement.textContent = note.title; // Personaliza esto según tus datos\n\n        notesContainer.appendChild(noteElement);\n      });\n    })[\"catch\"](function (error) {\n      return console.error('Error al actualizar las notas:', error);\n    });\n  }\n});","map":{"version":3,"sources":["/home/kurumilla/git/PetsaNoteAPP/app/javascript/packs/order.js"],"names":["document","addEventListener","console","log","orderSelect","querySelector","savedOrder","localStorage","getItem","orderToApply","urlParams","URLSearchParams","window","location","search","orderFromUrl","get","value","indexOf","currentUrl","URL","href","searchParams","set","history","pushState","selectedValue","setItem","updateNotesOrder","order","fetch","then","response","json","data","notesContainer","getElementById","innerHTML","notes","forEach","note","noteElement","createElement","textContent","title","appendChild","error"],"mappings":"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","sourcesContent":["document.addEventListener('turbolinks:load', function() {\r\n  console.log(\"Hola\")\r\n  const orderSelect = document.querySelector('select[name=\"order\"]');\r\n  \r\n  // Intentamos obtener el valor del orden desde localStorage\r\n  const savedOrder = localStorage.getItem('note_order');\r\n  let orderToApply = savedOrder || null; // Si no hay valor guardado, lo tomamos de la URL\r\n\r\n  // Revisa si hay un parámetro 'order' en la URL y lo aplica al select\r\n  const urlParams = new URLSearchParams(window.location.search);\r\n  const orderFromUrl = urlParams.get('order');\r\n  if (orderFromUrl) {\r\n    orderToApply = orderFromUrl;\r\n  }\r\n\r\n  // Si encontramos un valor de orden, lo aplicamos tanto al select como a la URL\r\n  if (orderToApply) {\r\n    // Aplicamos el valor al select\r\n    orderSelect.value = orderToApply;\r\n\r\n    // Si el valor del orden en la URL es diferente de lo que está en la URL actual, actualizamos la URL\r\n    if (window.location.search.indexOf('order') === -1 || orderFromUrl !== savedOrder) {\r\n      const currentUrl = new URL(window.location.href);\r\n      currentUrl.searchParams.set('order', orderToApply); // Establecemos el parámetro 'order'\r\n      window.history.pushState({}, '', currentUrl);  // Actualizamos la URL sin recargar la página\r\n    }\r\n  }\r\n\r\n  // Cuando el usuario cambia el orden\r\n  orderSelect.addEventListener('change', function() {\r\n    const selectedValue = this.value;\r\n    \r\n    // Guardamos el valor en localStorage\r\n    localStorage.setItem('note_order', selectedValue);\r\n\r\n    // Actualizamos la URL para reflejar el cambio sin recargar la página\r\n    const currentUrl = new URL(window.location.href);\r\n    currentUrl.searchParams.set('order', selectedValue);  // Establece el parámetro 'order'\r\n    window.history.pushState({}, '', currentUrl);  // Actualiza la URL sin recargar la página\r\n\r\n    // Llamada AJAX o actualización de la vista sin recargar\r\n    updateNotesOrder(selectedValue);  // Función que actualiza el orden de las notas sin recargar la página\r\n  });\r\n\r\n  // Función para actualizar las notas en la página sin recargarla\r\n  function updateNotesOrder(order) {\r\n    // Realizamos una solicitud AJAX para obtener las notas ordenadas\r\n    fetch(`/notes?order=${order}`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // Aquí, actualizas el contenido de las notas de acuerdo con la respuesta\r\n        // Puedes re-renderizar las notas con la nueva información\r\n        const notesContainer = document.getElementById('notes-container');\r\n        notesContainer.innerHTML = '';  // Limpiar las notas actuales\r\n\r\n        // Suponiendo que las notas vienen como una lista de objetos\r\n        data.notes.forEach(note => {\r\n          const noteElement = document.createElement('div');\r\n          noteElement.textContent = note.title;  // Personaliza esto según tus datos\r\n          notesContainer.appendChild(noteElement);\r\n        });\r\n      })\r\n      .catch(error => console.error('Error al actualizar las notas:', error));\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}